/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: BunnyLoveSu (https://sketchfab.com/bunnylovesu)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/cats-rigged-and-posed-f38f91b5fa7b43968b8c45d5160b0268
title: Cats - Rigged and Posed
*/

import { useRef, useState, useEffect, Suspense } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';

function FourCats(props) {
  const group = useRef();
  const { nodes, materials } = useGLTF('/four_cats/scene.gltf');

  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[230, 0, 0]}>
        <primitive object={nodes._rootJoint} />
        <skinnedMesh
          castShadow
          geometry={nodes.pasted__Cat_Volume53_HungryCat1_0.geometry}
          material={materials.HungryCat1}
          skeleton={nodes.pasted__Cat_Volume53_HungryCat1_0.skeleton}
        />
      </group>
      <group position={[-100, -10, 0]}>
        <primitive object={nodes._rootJoint_1} />
        <skinnedMesh
          castShadow
          geometry={nodes.pasted__Cat_Volume53_ExcitedCat1_0.geometry}
          material={materials.ExcitedCat1}
          skeleton={nodes.pasted__Cat_Volume53_ExcitedCat1_0.skeleton}
        />
      </group>
    </group>
  );
}

useGLTF.preload('/scene.gltf');

const CatModel = () => {
  const meshRef = useRef();

  useFrame(({ gl }) => {
    if (meshRef && meshRef.current) {
      meshRef.current.position.x = -5;
      meshRef.current.position.y = -2;
      meshRef.current.scale.set(0.01, 0.01, 0.01);
      // meshRef.current.rotation.y += 0.01;
    }
  });

  return (
    <>
      <mesh ref={meshRef} castShadow>
        <Suspense fallback={null}>
          <FourCats />
        </Suspense>
      </mesh>
    </>
  );
};

export default CatModel;
