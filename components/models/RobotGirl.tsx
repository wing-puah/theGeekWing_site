/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Poll_Creations (https://sketchfab.com/PollStudios)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/little-cute-robot-cbb370b40af149dd856bac5f0374af60
title: Little cute robot
*/

import dynamic from 'next/dynamic';
import { useRef, useState, useEffect, Suspense } from 'react';
import { useFrame } from '@react-three/fiber';
import {
  useGLTF,
  useAnimations,
  MeshDistortMaterial,
  Dodecahedron,
  OrbitControls,
  PerspectiveCamera,
} from '@react-three/drei';
import { useSpring, animated } from '@react-spring/three';

// import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import * as THREE from 'three';
import { palette } from 'styles/theme';

function FemaleRobot(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(
    '/female_cute_robot/scene.gltf'
  );
  const { actions } = useAnimations(animations, group);
  useEffect(() => {
    // actions['Armature.001Action'].play();
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group name="Armature001">
          <primitive object={nodes.Armature001_rootJoint} />
          <skinnedMesh
            castShadow
            geometry={nodes.Sphere_0.geometry}
            material={materials.plastic}
            skeleton={nodes.Sphere_0.skeleton}
          />
          <skinnedMesh
            castShadow
            geometry={nodes.Sphere_1.geometry}
            material={materials['Material.001']}
            skeleton={nodes.Sphere_1.skeleton}
          />
          <skinnedMesh
            castShadow
            geometry={nodes.Sphere_2.geometry}
            material={materials['Material.002']}
            skeleton={nodes.Sphere_2.skeleton}
          />
          <skinnedMesh
            castShadow
            geometry={nodes.Sphere_3.geometry}
            material={materials['Material.004']}
            skeleton={nodes.Sphere_3.skeleton}
          />
        </group>
        <group
          position={[-6.08, 9.12, 9.27]}
          rotation={[-0.78, -0.18, -0.13]}
          scale={[1, 1, 1]}
        />
      </group>
    </group>
  );
}

useGLTF.preload('/female_cute_robot/scene.gltf');

const Model = () => {
  const meshRef = useRef();
  const virtualCamera = useRef();
  // const virtualCamera = useRef<THREE.Camera>();

  useFrame(({ gl }) => {
    if (meshRef && meshRef.current) {
      meshRef.current.rotation.y = Math.PI;
      meshRef.current.rotation.x = 0.3;
      meshRef.current.position.y = -2;
    }
  });

  return (
    <>
      <mesh ref={meshRef} castShadow>
        <Suspense fallback={null}>
          <FemaleRobot />
        </Suspense>
      </mesh>
    </>
  );
};

export default Model;
